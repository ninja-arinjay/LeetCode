//LeetCode 494. Target Sum

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
          int tsum =0;
          for(int i=0; i<nums.length; i++){
              tsum = tsum + nums[i];
          }
          int sum = (target + tsum )/2;
          if(tsum < Math.abs(target) || (target+tsum) %2 != 0) return 0;
          return countSubsetSum(nums,sum);
    }
    public int countSubsetSum(int[] nums, int sum){
        int n= nums.length, w = sum;
	    int[][] t = new int[n+1][w+1];

        //Initialization
        for(int i=0; i<w+1; i++) t[0][i] = 0;
        for(int j=0; j<n+1; j++) t[j][0] = 1;

        //Knapsack 01
        for(int i=1; i<n+1; i++){
            for(int j=0; j<w+1; j++){
                if(nums[i-1] <= j){
                    t[i][j] = t[i-1][j-nums[i-1]] + t[i-1][j];
                }else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][w];
        }
}